-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local PathfindingService = game:GetService("PathfindingService")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- Constants
local TELEPORT_RADIUS = 500
local Y_TOLERANCE = 2
local TELEPORT_DELAY = 0.5

local AUTO_CLICK_INTERVAL = 0.1 -- seconds between clicks
local PATH_REFRESH_DELAY = 1 -- seconds between path recalculations
local MAX_CHASE_DISTANCE = 1000 -- max distance to chase players
local SLAPBOT_WALK_SPEED = 100 -- changed speed

-- ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "HubGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = PlayerGui

-- Main Frame
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 500, 0, 300)
mainFrame.Position = UDim2.new(0.5, -250, 0.5, -150)
mainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
mainFrame.BorderSizePixel = 0
mainFrame.Active = true
mainFrame.Draggable = true
mainFrame.Parent = screenGui

-- Rounded Corners for main frame
local mainCorner = Instance.new("UICorner")
mainCorner.CornerRadius = UDim.new(0, 12)
mainCorner.Parent = mainFrame

-- Left Vertical Tab Menu
local tabMenu = Instance.new("Frame")
tabMenu.Size = UDim2.new(0, 120, 1, 0)
tabMenu.Position = UDim2.new(0, 0, 0, 0)
tabMenu.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
tabMenu.BorderSizePixel = 0
tabMenu.Parent = mainFrame

local menuCorner = Instance.new("UICorner")
menuCorner.CornerRadius = UDim.new(0, 10)
menuCorner.Parent = tabMenu

local uiList = Instance.new("UIListLayout")
uiList.FillDirection = Enum.FillDirection.Vertical
uiList.SortOrder = Enum.SortOrder.LayoutOrder
uiList.Padding = UDim.new(0, 4)
uiList.Parent = tabMenu

-- Content Frame
local contentFrame = Instance.new("Frame")
contentFrame.Size = UDim2.new(1, -120, 1, 0)
contentFrame.Position = UDim2.new(0, 120, 0, 0)
contentFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
contentFrame.BorderSizePixel = 0
contentFrame.Parent = mainFrame

local contentCorner = Instance.new("UICorner")
contentCorner.CornerRadius = UDim.new(0, 10)
contentCorner.Parent = contentFrame

-- Tabs system
local tabs = {}

local function createTab(name)
	local button = Instance.new("TextButton")
	button.Size = UDim2.new(1, -10, 0, 40)
	button.Text = name
	button.Font = Enum.Font.SourceSansBold
	button.TextColor3 = Color3.fromRGB(255, 255, 255)
	button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
	button.TextScaled = true
	button.Parent = tabMenu

	local btnCorner = Instance.new("UICorner")
	btnCorner.CornerRadius = UDim.new(0, 6)
	btnCorner.Parent = button

	local tabPage = Instance.new("Frame")
	tabPage.Size = UDim2.new(1, 0, 1, 0)
	tabPage.BackgroundTransparency = 1
	tabPage.Visible = false
	tabPage.Parent = contentFrame

	tabs[name] = tabPage

	button.MouseButton1Click:Connect(function()
		for _, t in pairs(tabs) do
			t.Visible = false
		end
		tabPage.Visible = true
	end)

	return tabPage
end

-- Create tabs
local antisTab = createTab("Antis")
local badgesTab = createTab("Badges")
local miscTab = createTab("Misc")
tabs["Antis"].Visible = true -- default tab

-- === ANTI VOID TOGGLE (Antis Tab) ===
local antiVoidEnabled = false
local antiVoidPart = nil

local function createAntiVoid()
	local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
	if not hrp then return end

	local pos = hrp.Position
	antiVoidPart = Instance.new("Part")
	antiVoidPart.Anchored = true
	antiVoidPart.CanCollide = true
	antiVoidPart.Transparency = 0.5
	antiVoidPart.Name = "AntiVoidFloor"
	antiVoidPart.Size = Vector3.new(1e6, 0.1, 1e6)
	antiVoidPart.Position = Vector3.new(pos.X, pos.Y - 2, pos.Z)
	antiVoidPart.Material = Enum.Material.SmoothPlastic
	antiVoidPart.Parent = workspace
end

local function removeAntiVoid()
	if antiVoidPart then
		antiVoidPart:Destroy()
		antiVoidPart = nil
	end
end

local antiToggle = Instance.new("TextButton")
antiToggle.Size = UDim2.new(0, 320, 0, 50)
antiToggle.Position = UDim2.new(0, 30, 0, 30)
antiToggle.Text = "Anti-Void: OFF"
antiToggle.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
antiToggle.TextColor3 = Color3.new(1, 1, 1)
antiToggle.TextScaled = true
antiToggle.Font = Enum.Font.SourceSansBold
antiToggle.Parent = antisTab

local antiCorner = Instance.new("UICorner")
antiCorner.CornerRadius = UDim.new(0, 8)
antiCorner.Parent = antiToggle

antiToggle.MouseButton1Click:Connect(function()
	antiVoidEnabled = not antiVoidEnabled
	if antiVoidEnabled then
		antiToggle.Text = "Anti-Void: ON"
		antiToggle.BackgroundColor3 = Color3.fromRGB(0, 170, 0)
		createAntiVoid()
	else
		antiToggle.Text = "Anti-Void: OFF"
		antiToggle.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
		removeAntiVoid()
	end
end)

-- === TELEPORT TOGGLE (Misc Tab) ===
local teleportEnabled = false

local teleportToggle = Instance.new("TextButton")
teleportToggle.Size = UDim2.new(0, 320, 0, 50)
teleportToggle.Position = UDim2.new(0, 30, 0, 30)
teleportToggle.Text = "Teleport: OFF"
teleportToggle.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
teleportToggle.TextColor3 = Color3.new(1, 1, 1)
teleportToggle.TextScaled = true
teleportToggle.Font = Enum.Font.SourceSansBold
teleportToggle.Parent = miscTab

local teleCorner = Instance.new("UICorner")
teleCorner.CornerRadius = UDim.new(0, 8)
teleCorner.Parent = teleportToggle

teleportToggle.MouseButton1Click:Connect(function()
	teleportEnabled = not teleportEnabled
	if teleportEnabled then
		teleportToggle.Text = "Teleport: ON"
		teleportToggle.BackgroundColor3 = Color3.fromRGB(0, 170, 0)
	else
		teleportToggle.Text = "Teleport: OFF"
		teleportToggle.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
	end
end)

-- === SLAP BOT TOGGLE (Misc Tab) ===
local slapBotEnabled = false
local mainLoopConnection
local autoClickLoop
local speedResetConnection

local slapToggle = Instance.new("TextButton")
slapToggle.Size = UDim2.new(0, 320, 0, 50)
slapToggle.Position = UDim2.new(0, 30, 0, 100) -- below teleport toggle
slapToggle.Text = "Slap Bot: OFF"
slapToggle.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
slapToggle.TextColor3 = Color3.new(1, 1, 1)
slapToggle.TextScaled = true
slapToggle.Font = Enum.Font.SourceSansBold
slapToggle.Parent = miscTab

local slapCorner = Instance.new("UICorner")
slapCorner.CornerRadius = UDim.new(0, 8)
slapCorner.Parent = slapToggle

-- Helpers for slap bot
local function getHRP(player)
	return player.Character and player.Character:FindFirstChild("HumanoidRootPart")
end

local function getHumanoid(player)
	return player.Character and player.Character:FindFirstChildOfClass("Humanoid")
end

local function getClosestPlayer()
	local myHRP = getHRP(LocalPlayer)
	if not myHRP then return nil end
	local closest, shortest = nil, math.huge
	for _, player in ipairs(Players:GetPlayers()) do
		if player ~= LocalPlayer then
			local hrp = getHRP(player)
			if hrp then
				local dist = (myHRP.Position - hrp.Position).Magnitude
				local yDiff = math.abs(myHRP.Position.Y - hrp.Position.Y)
				if dist < shortest and dist <= MAX_CHASE_DISTANCE and yDiff <= 3 then
					shortest = dist
					closest = player
				end
			end
		end
	end
	return closest
end

local function moveToWaypoint(waypoint, humanoid)
	if waypoint.Action == Enum.PathWaypointAction.Jump then
		humanoid.Jump = true
	end
	humanoid:MoveTo(waypoint.Position)
end

local function followPath(humanoid, path)
	if not path or path.Status ~= Enum.PathStatus.Success then return end
	local currentWaypointIndex = 1

	while currentWaypointIndex <= #path:GetWaypoints() and slapBotEnabled do
		local wp = path:GetWaypoints()[currentWaypointIndex]
		moveToWaypoint(wp, humanoid)
		humanoid.MoveToFinished:Wait()
		currentWaypointIndex += 1
	end
end

local function autoClick()
	local character = LocalPlayer.Character
	if not character then return end
	local tool = character:FindFirstChildOfClass("Tool")
	if tool and tool.Enabled then
		tool:Activate()
	end
end

local function stopSlapBot()
	slapBotEnabled = false
	slapToggle.Text = "Slap Bot: OFF"
	slapToggle.BackgroundColor3 = Color3.fromRGB(70, 70, 70)

	if mainLoopConnection then
		mainLoopConnection:Disconnect()
		mainLoopConnection = nil
	end

	if speedResetConnection then
		speedResetConnection:Disconnect()
		speedResetConnection = nil
	end

	autoClickLoop = nil

	local humanoid = getHumanoid(LocalPlayer)
	if humanoid then
		humanoid.WalkSpeed = 16 -- default speed
		humanoid:Move(Vector3.new(0,0,0))
	end
end

local function startSlapBot()
	local humanoid = getHumanoid(LocalPlayer)
	local myHRP = getHRP(LocalPlayer)
	if not humanoid or not myHRP then return end

	slapBotEnabled = true
	slapToggle.Text = "Slap Bot: ON"
	slapToggle.BackgroundColor3 = Color3.fromRGB(0, 170, 0)

	-- Set speed to 100 and keep it there
	humanoid.WalkSpeed = SLAPBOT_WALK_SPEED
	speedResetConnection = RunService.Heartbeat:Connect(function()
		if slapBotEnabled and humanoid then
			humanoid.WalkSpeed = SLAPBOT_WALK_SPEED
		end
	end)

	-- Auto click loop
	autoClickLoop = task.spawn(function()
		while slapBotEnabled do
			autoClick()
			task.wait(AUTO_CLICK_INTERVAL)
		end
	end)

	-- Main loop
	mainLoopConnection = RunService.Heartbeat:Connect(function()
		if not slapBotEnabled then return end
		local target = getClosestPlayer()
		if target and getHRP(target) then
			local targetHRP = getHRP(target)
			local path = PathfindingService:CreatePath()
			path:ComputeAsync(myHRP.Position, targetHRP.Position)

			if path.Status == Enum.PathStatus.Success then
				followPath(humanoid, path)
			else
				humanoid:MoveTo(targetHRP.Position)
			end
		end
	end)
end

slapToggle.MouseButton1Click:Connect(function()
	if slapBotEnabled then
		stopSlapBot()
	else
		startSlapBot()
	end
end)

-- Stop slap bot on character respawn
LocalPlayer.CharacterAdded:Connect(function()
	stopSlapBot()
end)

-- === TELEPORT LOGIC ===
local function isSpectating(player)
	local char = player.Character
	if not char then return false end
	for _, item in ipairs(char:GetChildren()) do
		if item:IsA("Tool") and item.Name == "Spectator" then
			return true
		end
	end
	return false
end

task.spawn(function()
	while true do
		if teleportEnabled then
			local myHRP = getHRP(LocalPlayer)
			if myHRP then
				local closestPlayer, closestDistance = nil, TELEPORT_RADIUS + 1
				for _, p in ipairs(Players:GetPlayers()) do
					if p ~= LocalPlayer and not isSpectating(p) then
						local otherHRP = getHRP(p)
						if otherHRP then
							local yDiff = math.abs(myHRP.Position.Y - otherHRP.Position.Y)
							local distance = (myHRP.Position - otherHRP.Position).Magnitude
							if distance <= TELEPORT_RADIUS and yDiff <= Y_TOLERANCE and distance < closestDistance then
								closestDistance = distance
								closestPlayer = p
							end
						end
					end
				end
				if closestPlayer then
					local targetHRP = getHRP(closestPlayer)
					if targetHRP then
						myHRP.CFrame = targetHRP.CFrame
					end
				end
			end
		end
		task.wait(TELEPORT_DELAY)
	end
end)
